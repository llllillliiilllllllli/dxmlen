ID	Subject	Title	Description
1	area-System.Xml	Some XPath.XDocument tests are failing	Some XPath.XDocument queries have different results than other XPath navigators. This might be an old behavior or newly introduced bug.  Failing tests: build /p=IncludeTraits=ActiveIssue=17 
2	area-System.IO	DirectoryInfo doesn't refresh state after Create (Unix)	"Example:    ```csharp  var di = new DirectoryInfo($""/tmp/test-{Guid.NewGuid()}"");  if (!di.Exists)    di.Create();  Console.WriteLine(di.CreationTimeUtc);  Console.WriteLine(di.LastWriteTimeUtc);  ```    The code above fails, because it complains that the file doesn't exist.    EDIT: This works in .NET Framework"
3	area-System.Diagnostics	Remove usage of NtQueryInformationProcess and K32EnumProcessModules from System.Diagnosctics.Process for UWP	Fixes https://github.com/dotnet/corefx/issues/21727  Fixes https://github.com/dotnet/corefx/issues/21728    Replaces NtQueryInformationProcess with GetProcessId and converts usage of K32EnumProcessModules to use QueryFullProcessImageName instead for UWP.    cc: @danmosemsft @stephentoub 
4	area-System.Drawing	[porting] Image.FromFile has different argument validation from netfx	"Following tests pass with netfx, fail with netcoreapp:    ```cs  [Fact]  [ActiveIssue(21747, TestPlatforms.Windows)]  public void FromFile_NullFileName_ThrowsArgumentNullException()  {      AssertExtensions.Throws<ArgumentNullException>(""path"", () => Image.FromFile(null));      AssertExtensions.Throws<ArgumentNullException>(""path"", () => Image.FromFile(null, useEmbeddedColorManagement: true));  }    [Fact]  [ActiveIssue(21747, TestPlatforms.Windows)]  public void FromFile_EmptyFileName_ThrowsArgumentNullException()  {      AssertExtensions.Throws<ArgumentException>(""path"", null, () => Image.FromFile(string.Empty));      AssertExtensions.Throws<ArgumentException>(""path"", null, () => Image.FromFile(string.Empty, useEmbeddedColorManagement: true));  }    [Fact]  [ActiveIssue(21747, TestPlatforms.Windows)]  public void FromFile_LongFile_ThrowsPathTooLongException()  {      string fileName = new string('a', 261);        Assert.Throws<PathTooLongException>(() => Image.FromFile(fileName));      Assert.Throws<PathTooLongException>(() => Image.FromFile(fileName, useEmbeddedColorManagement: true));  }    [Fact]  [ActiveIssue(21747, TestPlatforms.Windows)]  public void FromFile_NoSuchFile_ThrowsFileNotFoundException()  {      Assert.Throws<FileNotFoundException>(() => Image.FromFile(""NoSuchFile""));      Assert.Throws<FileNotFoundException>(() => Image.FromFile(""NoSuchFile"", useEmbeddedColorManagement: true));  }  ```    I have a fix"
5	area-System.Net	unable to parse IPv6 link-local address with interface name	"https://tools.ietf.org/html/rfc4007#section-11.3    The example shows ff08::9abc%interface10 and Unix systems generally use  address%if_name notation. (https://en.wikipedia.org/wiki/IPv6_address)     > furt@Ubuntu:~/ipv6$ ping6 fe80::108e:ac5e:1999:d42f%enp0s5  > PING fe80::108e:ac5e:1999:d42f%enp0s5(fe80::108e:ac5e:1999:d42f) 56 data bytes  > ....  >     however   ```C#   IPAddress.Parse(""fe80::108e:ac5e:1999:d42f%enp0s5"")  Unhandled Exception: System.FormatException: An invalid IP address was specified. ---> System.Net.Sockets.SocketException: Invalid argument  ```  throws exception. The c# parser assumes that the zoneid can only be integer.   On Linux and macOS this can be either interface index or valid interface name. "