  Patents
assignee:Microsoft

1 of 135828  
Back to results
Assignee: Microsoft;
Method and system for protecting cloud-based applications executed in a cloud computing platform
Abstract
A method and system for protecting cloud-based applications executed in a cloud computing platform are presented. The method includes intercepting traffic flows from a plurality of client devices to the cloud computing platform, wherein each of the plurality of client devices is associated with a user attempting to access a cloud-based application; extracting at least one parameter from the intercepted traffic related to at least each client device and a respective user attempting to access the cloud-based application; determining based on, the at least one parameter and at least a set of parameters combining cloud-based application risk factors for a provider of the cloud computing platform, a risk indicator for the user attempting to access the cloud-based application; and performing an action to mitigate a potential risk to the cloud computing platform based on the determined risk indicator.
Images (16)
               
Classifications
 H04L63/0281 Proxies
View 20 more classifications
US10091169B2
United States

 Download PDF  Find Prior Art  Similar
InventorAviram CohenLiran MoysiAmi LuttwakRoy ReznikGreg VishnepolskyCurrent Assignee Microsoft Technology Licensing LLC
Worldwide applications
2014  MX EP AU JP EP KR SG US WO RU MY CN CA 2015  US 2016  IL PH CL
Application US14/968,432 events 
2013-11-11
Priority to US201361902786P
2015-12-14
Application filed by Microsoft Israel Research and Development 2002 Ltd
2016-04-21
Publication of US20160112375A1
2018-10-02
Application granted
2018-10-02
Publication of US10091169B2
Status
Active
2034-11-12
Anticipated expiration
Show all events
InfoPatent citations (69) Non-patent citations (17) Cited by (77) Legal events Similar documents Priority and Related ApplicationsExternal linksUSPTOUSPTO PatentCenterUSPTO AssignmentEspacenetGlobal DossierDiscuss
Description
CROSS-REFERENCE TO RELATED APPLICATIONS
This application is a continuation application of U.S. patent application Ser. No. 14/539,980 filed Nov. 12, 2014, now pending. The U.S. patent application Ser. No. 14/539,980 claims priority to U.S. Provisional Patent Application Ser. No. 61/902,786 filed on Nov. 11, 2013, and to U.S. Provisional Patent Application Ser. No. 61/902,787, filed on Nov. 11, 2013, and to U.S. Provisional Patent Application Ser. No. 61/902,789 filed on Nov. 11, 2013, and to U.S. Provisional Patent Application Ser. No. 62/049,473 filed on Sep. 12, 2014, the contents of each of which are hereby incorporated by reference in their entireties.
TECHNICAL FIELD
This application relates generally to securing communications networks and systems by monitoring and securing communications, in particular by use of a suffix proxy.
BACKGROUND
Enterprises are increasingly adopting cloud-based software-as-a-service offerings. These services are subject to varied network security risks. Known systems for securing these networks operate by inspecting traffic between servers operating the software-as-a-service and the endpoint operated by a user. These known network security systems typically require complex configuration of the endpoint which increases system complexity. Furthermore, in many cases, the endpoint may not be under the complete control of the enterprise, may be entirely unmanaged, or otherwise un-configurable. In addition to the difficulties inherent in configuring and administering a user-controlled endpoint, it is difficult to ensure traffic captivation for an entire session when network addresses are generated dynamically.
BRIEF DESCRIPTION OF THE DRAWINGS
The subject matter disclosed herein is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the disclosed embodiments will be apparent from the following detailed description taken in conjunction with the accompanying drawings.
FIG. 1 illustrates an example overview of an example architecture and method operation.
FIG. 2 illustrates an example architecture with multiple proxy nodes.
FIG. 3 illustrates an example authentication method using SAML.
FIG. 4 illustrates an example of multiple distinct networks, including proxy nodes globally distributed for reduced latency.
FIG. 5 illustrates an example network proxy architecture showing fail-open routing.
FIG. 6 illustrates an example proxy node composed of a cluster of load balancers and multiple proxy nodes.
FIG. 7 illustrates an example user interface.
FIG. 8 illustrates an example user interface.
FIG. 9 illustrates an example user interface.
FIG. 10 illustrates an example user interface.
FIG. 11 illustrates an example method for threat detection.
FIG. 12 illustrates an example parameter set.
FIG. 13 illustrates an example method of discovery of the software as a service (SaaS) environment.
FIG. 14 illustrates an example method of non-cached suffix proxy operation.
FIG. 15 illustrates an example method of cached suffix proxy operation.
DETAILED DESCRIPTION
An architecture for monitoring and securing communications is described herein. The systems and methods described herein can be used to transparently enable cloud traffic security and control for users anywhere. The system can be configured to secure any or all traffic and activities in a company's cloud services accounts. In some embodiments, the system can be configured so that it does not require any client side or network installation. The system can include a highly resilient virtual network composed of independent autonomous network proxies distributed in multiple locations worldwide.
The managed communications network proxy service can be used to intercept, monitor, modify, and forward network communications traffic between a user and a network-based software services provider. The managed network proxy service can be configured to operate so as to detect and mitigate network threats. As non-limiting examples, the service can be configured to operate in various modes, including application firewall mode; passive intrusion detection (IDS) mode, to notify of suspicious network traffic and behavior; or intrusion prevention system (IPS) mode, to block threats. The system can also be configured to perform application control, URL filtering, and malware protection on the network traffic.
Architecture
The system described herein can be configured to operate on network traffic between a network-based software as a service (SaaS) provider and a client. In some embodiments, the system is capable of being configured to operate on such traffic between the SaaS provider and a client computing device when that computing device is connected to the SaaS provider through a public network (such as the Internet) without any controls or restrictions having been placed on the client device or network. In some embodiments, no configuration of the client device is necessary.
Architecture Designs
The components of the system can be embodied in the form of a managed communications network proxy. While reference may be made herein to a proxy, it is understood that the proxy can be embodied in one or more network devices. Furthermore, the managed network proxy may be decentralized and the functions of the managed network proxy distributed over multiple machines in diverse geographic regions.
In some embodiments, the network proxy can be configured so that traffic between a client device and the SaaS provider passes through the network proxy. Because the network proxy intermediates the communications, it can be used to monitor the network traffic between these points and take action on the network traffic based on predefined policies and rules. An overview of an example architecture and method operation is illustrated in FIG. 1. The proxy network can be optimized for resilience, and fail-open controls can be used to reroute the user's traffic if the proxy network fails. As discussed in more detail below, upon deployment, the general flow of SaaS traffic is as follows:
From any location, on any device, users access an organization's cloud services. Traffic is routed through the closest managed network proxy node. Nodes can function as policy enforcement nodes and provide full auditing of cloud activities. At the proxy network data center, events are tokenized and gathered in the central data center in a separate database for each tenant. Event processing takes place and incidents are reported (e.g., “unknown device accessing sensitive data”). A user interface can be provided, by which managers can access a console and have visibility into cloud activities. Furthermore, policies can be defined and enforced by the proxy nodes. An example architecture with multiple proxy nodes is illustrated in FIG. 2.
The proxies can be configured to operate autonomously, ensuring resilience and high availability across different Internet service providers (ISPs) and geographies. In some embodiments, a star architecture can be employed wherein all nodes send information (one way) to the central data center.
The system can be configured to either fail-secure or fail-open. If an external hosting solution is used, the user can be routed to the original SaaS provider in case other means fail. This ensures a seamless experience to the user.
Public and Private Clouds
Private cloud deployment: The proxy servers can be deployed in a company's private cloud for additional security for the company data. In this arrangement, the metadata logs may still be sent outside of the organization perimeter while network traffic is contained within the organization's network.
Public cloud deployment: The proxy servers are deployed outside the company's private cloud. The cloud itself may be a public or private cloud.
Managed Network Proxy Service Infrastructure
The managed communications network proxy described herein can be configured in a variety of proxy modes, including, as non-limiting examples, a forward proxy, a suffix proxy, or a reverse proxy.
If configured as a forward proxy, the network proxy can use a Proxy Automatic Configuration (PAC) file and/or be connected to an existing network proxy in proxy chaining. If configured as a reverse proxy, deployment can be made through organizational DNS servers.
In preferred embodiments, the managed network proxy can be configured as a suffix proxy. For example, as a suffix proxy, http://www.salesforce.com would be accessed through http://www.salesforce.com.network-proxy-service.com, where network-proxy-service.com is the domain name used for the managed network proxy service. In some embodiments, the suffix proxy can use two factor authentication, authentication to both an authentication center at the suffix proxy and to the SaaS provider.
Protocol Support
The managed network proxy can be configured to support any arbitrary application or protocol. As non-limiting examples, the following protocols may be supported: HTTP and HTTPS, RPC over HTTP, Outlook anywhere, WebDAV, FTP, and proprietary vendor protocols.
Security: SaaS Traffic Captivation
The managed network proxy can be configured to inspect the traffic and detect SaaS Internet addresses. In some embodiments, the managed network proxy can be configured to inspect the network traffic for Internet addresses (such as uniform resource locators, uniform resource identifiers, etc.) As non-limiting examples, the network proxy can decompile, deconstruct, or disassemble network traffic for inspection. The managed network proxy can be configured to modify network traffic between the client device and the SaaS provider so that no network addresses are provided to the user device that would direct the client device to access a SaaS resource directly, bypassing the managed network proxy. If a SaaS Internet address is detected, that address can be rewritten to an address at the network proxy by appending the domain name for the network proxy service to the original network address.
The suffix proxy can be configured for captive page processing by processing SaaS server responses so that subsequent requests are handled by the suffix proxy. The processing may be dependent on the file type and response type. As non-limiting examples, file types processed can include HTML or JavaScript and responses can include gzipped responses or chunked responses. The suffix proxy can be configured to emulate any content, including webpages, sent from the SaaS provider. The suffix proxy can be configured to inspect and/or decompile any content to identify any referred pages and/or URLs present in the content and to rewrite those URLs.
In some cases, the inspection will require executing code or scripts being transferred between the client and the SaaS provider. For example, JavaScript can be emulated at the network proxy to detect the generation of network addresses that would directly access the SaaS provider. If direct access addresses are identified in the content, the content can be modified to rewrite the addresses to refer to the network proxy.
Security: SaaS Service Lockdown
The system can be configured to limit access to the SaaS service only through the managed network proxy. The system can include multiple techniques for this lockdown, and the technique chosen may depend on the deployment method, described in more detail below. Network traffic can be locked down at the time a session is created, or at any time thereafter. Session initiation is described in more detail below.
Lockdown Method: Credentials Replacement
In some environments, the SaaS provider may use Security Assertion Markup Language (SAML). In those environments, SAML token replacement can be used to lockdown the network connection. For example, the SAML token may be valid for 5 minutes. When a SAML proxy is configured, users can access the service only through the managed network SAML proxy.
Browser cookie replacement can be used to lockdown the connection. When a user authenticates to the SaaS provider, the SaaS provider sends a cookie to the user. The cookie sent may be an authentication cookie used by the SaaS provider to indicate whether the user is logged in or not, and which account the user is logged in with. Because the managed network proxy is between the user and the SaaS provider, it can intercept and encrypt the user browser cookie sent by the SaaS provider. The managed network proxy can then send the encrypted cookie to the user for storage on the user's device. Thus, the user only keeps an encrypted copy of the cookie which cannot be used directly by the client on the original SaaS site. When used through the managed proxy network, the cookie is sent from the client device to the proxy network, decrypted in the proxy network, and sent to the originating site. In some cases, the cookie generated by the SaaS provider may be encrypted or contain encrypted content. In these cases, the managed network proxy can add an additional layer of encryption to the cookie before sending it to the client.
Similar to the way browser cookies can be replaced, OAuth tokens (or any other persistent API token) can also be replaced inline. The managed network proxy can track requests for tokens by the client (for example, OAuth tokens used by mobile applications) and replace them with an encrypted version. This enables enforcement of service lockdown across additional authentication scenarios.
The managed network proxy can also proxy a user password. This technique can be applied to any SaaS service. In some embodiments, a password proxy can be used when SAML is not supported. To implement this, the SaaS service password can be split into two or more parts. The user knows less than all of the parts of the password. The managed network proxy service stores the remainder of the password. In this arrangement, the full password can be composed only when the user accesses the SaaS service through the managed network proxy service. The technique does not require the managed network proxy service to store user passwords. For example, adding a hash suffix to all passwords requires storing only a single hash key.
Any efforts by a user to change a password in the SaaS application can be monitored through the managed network proxy service, and the user can be permitted to set part of the password. In some embodiments, the user is only enabled to set half of the password. When a password proxy is configured, any request for a password change (e.g., “forgot my password” links) can be monitored by the network proxy and the network proxy can be configured to hash to the new password.
Lockdown Method: Access Restriction
In some cases, the SaaS application can be configured to enable an Internet protocol (IP) address restriction feature and thereby restrict access to only Internet protocol (IP) addresses associated with the network proxy service.
Additional Security Functions
The managed network proxy service can be configured to support additional security functions. As a non-limiting example, the network proxy can be used to perform an audit of user activity whereby any user action can be parsed and/or audited from the traffic stream. The network proxy can be used in policy enforcement. For example, the proxy service can be used for access control to prohibit a specific operation; for data loss prevention (DLP), by implementing DLP policies based on the context of the user, device, location, action, content, and/or velocity; for dynamic masking; and for watermarking. Network threats can also be detected and/or blocked using threat characterization logic.
The managed network proxy service can be configured to provide enhanced file protection services. In some embodiments, the network proxy service can support integration with network-based file storage services. Non-limiting examples of these types of services include Google™ Drive, Dropbox™, etc. The network proxy can be configured to prevent a user from retrieving files from the SaaS provider and storing them locally on the user's device. This may be referred to as an “always in the cloud” policy. In some embodiments, this can be configured to change and redirect information flows dynamically during a user session so that files are not transferred between SaaS application and the user's device or between SaaS applications. In some cases, in lieu of downloading the file, a version of the file may be displayed to the user.
VPN Over Web
The proxy service can be configured to enable secure access to corporate intranets. Once the user is authenticated at the network proxy service, the user can access an intranet site over the web (using, for example HTTP(S)). This method does not require a dedicated VPN client on the device. Once a connection is initiated, the network proxy service opens a VPN connection and functions as a reverse proxy for HTTP(S) intranet sites. Other features such as user auditing, alerting and file protection can be enforced on VPN connections.
Deployment Methods
The system can be deployed by any of various means, alone or in combination. In some configurations, the system can be deployed without any configuration of the client. In other configurations, the client can be configured instead of or in addition to configuration at the SaaS.
Transparent Deployment Methods
The system can include techniques to transparently forward traffic between the user and the SaaS provider through the managed network proxy. In these embodiments, access to the SaaS application can be restricted to only users of the proxy. These techniques enable the operation of a security control without any installation on the user device or user's local network. This technique can be used on a global basis for all applications hosted by the SaaS provider.
A. Transparent Authentication Proxy (Authentication Layer)
By leveraging built-in support for Security Assertion Markup Language (SAML) or similar protocols in cloud services, a user can be automatically redirected to the managed network proxy servers without any configuration on the client side. For example, SAML is an XML standard that allows secure web domains to exchange user authentication and authorization data. Using SAML, an online service provider can contact a separate online identity provider to authenticate users who are trying to access secure content.
As a non-limiting example, this technique can be used with SaaS services that support SAML and organizations that already have an external SAML provider. In these cases, the managed communications network proxy is configured as the SAML provider, and the proxy service then uses the original SAML provider to perform the authentication. Upon successful authentication, the user is redirected to the SaaS provider through the suffix proxy provided by the network proxy service. (The suffix proxy service is described in more detail below.)
The access control features of SaaS applications can be used to restrict access to users of the suffix proxy. The SAML proxy can also be used to install a browser add-on instead of redirecting to a suffix proxy. In this case, the add-on will direct the traffic to the network proxy service transparently and a reverse proxy will be used instead of a suffix proxy. In addition to SAML, the managed communications network proxy could be configured to interoperate with other protocols that have similar functionality. For example, WS-Federation™ could be used in connection with Office 365™ services. An example authentication method using SAML is illustrated and described in FIG. 3.
B. Transparent Self IDP Provisioning (Authentication Layer)
Self IDP provisioning can be used instead of a Single Sign On solution. This is a variant of the SAML proxy method where the user is redirected to the managed SAML proxy service but the authentication process is performed by the managed communications network proxy service. A login proxy can be used. Upon user login request, the managed network SAML proxy queries the original SaaS service to verify the user credentials. Using password synchronization, the network proxy service can function as an ad-hoc SAML provider by installing a password synchronization tool which synchronizes user passwords from an Active Directory (or any other LDAP directory) to the managed network SAML proxy.
C. Transparent Gateway Proxy (Traffic Layer)
This technique can be applied to any SaaS service and may be particularly applicable in cases where SAML is not supported by the SaaS service. The user can be instructed to use a different URL when accessing the SaaS service. The URL redirects the user through the managed network proxy service. This configuration can use access control features of SaaS applications to restrict access to users of the suffix proxy. The IP restriction feature can be enabled to limit access only to IP addresses located in the managed communications network proxy service.
Non-Transparent Deployment Methods
Mobile and desktop applications can be configured individually by using installation or configuration changes to the user's device in order to redirect the traffic through the managed communications network proxy service.
A. SAML proxy: Using the SAML proxy described above, the user can be redirected to a page requesting that the user install and/or configure the device to communicate with the managed communications network proxy service.
B. Desktop applications (traffic layer): Most desktop applications support the system proxy configuration. The PAC file can be auto-configured for managed devices and user-configured for unmanaged devices. PAC is supported by major operating systems (OSes), browsers and applications and can be deployed in a Windows domain environment using a Group Policy Object (GPO). The PAC file can be configured to allow only SaaS traffic through the managed proxy network platform and the rest of the user's Internet traffic can be routed directly without change.
C. Mobile applications (traffic layer): Similar to the PAC method for managed devices, mobile devices may require an installation of a VPN or APN on the device and a managed proxy network certificate.
Application specific solutions: Some applications have specific configuration options that enable seamless redirection. For example, using the Outlook auto-discovery feature, Outlook clients are automatically redirected to the managed proxy network Outlook proxy.
Deployment Methods for Managed Networks and Devices
In some embodiments, the managed network proxy can be embodied in an appliance on the user's premises. In other embodiments, the managed network proxy functionality can be achieved through a web browser add-on. The browser add-on can be configured to operate like the PAC file, in that once a SaaS application is detected in the browser, traffic is redirected to the managed proxy network.
Some embodiments can be configured to use proxy chaining whereby an existing organizational proxy is configured to forward SaaS-bound requests through the managed communications network proxy service infrastructure. These embodiments can optionally include an organizational identifier (username and/or IP) with the forwarded request.
In some embodiments, a PAC file can be used. The PAC can be deployed throughout the organization. The PAC can be used to redirect SaaS applications to the managed communications network proxy service. This can be based on a database of SaaS providers. An efficient PAC with a compiled list of domains to a tree based on the domain names can be used.
In any of these configurations described above, the platform can be dynamically deployed on specific users or groups of users, thereby allowing for gradual deployment. This can be done based on the SAML proxy, for example, by rerouting only some of the users.
System Availability
As illustrated in FIG. 4, the platform can include multiple distinct networks, including proxy nodes globally distributed for reduced latency (for example, in five centers, as illustrated). Users can be routed to the closest node or another optimal node. The system can include automatic DNS failover between nodes. Any of the nodes can function as a policy enforcement point and create auditing logs. As a non-limiting example, the backend network can be an AWS Virtual Private Cloud (VPC) containing the central database and backend servers.
DNS High Availability
An example network proxy architecture showing fail-open routing is illustrated in FIG. 5. The proxy node network can use the DNS server to implement high availability. The DNS records can be set to a very short time to live (TTL) (for example, 30 seconds), forcing the clients to query the DNS server for updates regularly (query times may vary depending on browser cache settings). The server directs the client to the closest node available (Geo-DNS) and, in case of node failure, can detect the problem and redirect clients seamlessly to other available nodes.
The availability of the DNS service itself can affect the described behavior. For example, Route53 by Amazon is considered a mature and highly available system guaranteeing high availability. In the event the DNS server itself is down, the system can be configured to fail open.
Autonomous Nodes
The proxy nodes can be built in clusters in various global regions. Some or all of the nodes can be simultaneously online and serving customers. In case of failure, nodes are stateless, allowing the system to move users between nodes without any service interruption.
Nodes can be autonomous and resilient. As illustrated in FIG. 6, a proxy node can be composed of a cluster of load balancers and multiple (for example, 2 or 3) proxy nodes. Some of the central nodes can rely on external load balancers provided by the cloud provider itself (e.g., ELB and RackSpace) allowing for even greater resilience. Each node can function autonomously without any dependencies on other parts of the platform. The communication with the backend network can be performed using broker messages and be completely asynchronous. In case of backend failure, the messages are stored internally in a capped sized queue, and operation of the node itself is not affected. In the example embodiment illustrated in FIG. 6, each node can be composed of a cluster of load balancers and several proxy servers. There can be multiple central nodes (such as US West, US East, Europe and Middle East) that use external load balancers (such as AWS and Rackspace load balancers) with built in distributed denial of service (DDoS) protection (the load balancers route traffic and might not perform SSL termination). In case of a DDoS attack, traffic can be automatically routed to the nearest central node.
Failover Scenarios
The system can be configured to handle many different failover scenarios. Some possible scenarios and resolutions are described below.
Single Machine Failover: In this case, the DNS routes the request to the closest node. Each node operates independently and handles failovers internally.
Failure of an internal process: Full redundancy starts from the machine level, where each critical process is guarded by a watchdog and restarted immediately. Critical processes have several instances constantly running. All non-critical operations are performed asynchronously.
Failure of a proxy server: Will drive the traffic to the other proxies in the node.
Failure of a load balancer server: Will cause all traffic to go through the second load balancer in the cluster.
Single Proxy Node Failover: Single node failures might be caused by data center outage or ISP connectivity problems. In case the node fails to respond, the DNS Failover will route the traffic to next available node without user disruption.
Regional Failover: Even in case of a regional problem affecting multiple nodes, the system will continue normal operation. The DNS failover will route the traffic to the remaining functioning nodes in other regions. Users from the impacted region might experience higher latency than usual, but to a lesser degree.
Central Node Failover: Although the DNS server performs load balancing between available nodes, unusual spikes might cause a chain reaction affecting the auxiliary nodes. For this reason, in case of multiple failures, traffic is routed to the central nodes which are specifically designed to handle unusual traffic spikes.
Additional Features
The managed network proxy service can be configured to additionally provide metrics relevant to business analytics, adoption statistics, feature usage, license utilization, user engagement, and service level agreement (SLA) monitoring, as non-limiting examples.
The service can also include a command and control center for the SaaS service, an alerts center, and a usage statistics center. The service can perform role enforcement to enforce making data accessible to each user according to the user's role and realm. The service can perform dynamic SSL pooling to maintain several backend connections to SaaS providers according to predetermined daily usage patterns.
Example management consoles for the managed network proxy service and other features are illustrated in FIGS. 7-10.
Threat Detection Logic
Using the systems and methods described above, the network traffic between the networked SaaS provider and the client device can be intercepted at the proxy node. The proxy node can be further configured to analyze the traffic for various threat indicators using threat detection logic.
An overview of a method for threat detection is illustrated in FIG. 11. The security gateway (1011) can be implemented as an algorithmic routine in one or more of the proxy nodes (1010) through which a user's network traffic is carried. Alternatively, the security gateway may be embodied in a separate device through which the traffic is carried. The user traffic may be between any source and destination connected to the proxy node. Non-limiting examples of users may be an on-premises user, an internet user, a partner user, or a mobile user.
The security gateway (1011) can be configured to extract various parameters from the user traffic. The following non-limiting examples are provided. The security gateway can be configured to extract information descriptive of the user device. As non-limiting examples, the device parameters can include the type of device such as an iPad or Surface tablet, operating system of the device such as Windows RT or iOS, and/or web browser being used, such as Chrome or Explorer. The security gateway can be configured to extract information descriptive of the location of the user's device. The location information can be descriptive of the physical/geographic location and/or logical location on a network. The security gateway can be configured to extract information relating to an action being taken by a user (e.g., request for data) and/or a response by the SaaS platform (e.g., sending requested data). The security gateway can also be configured to extract information relating to the identity of the user's device (in addition to its type), the time of the user's activity, and the bandwidth consumed by the user's actions.
The security gateway can also be configured to detect and identify any communications device being used by a user to connect to the SaaS provider. The device identification can be logged in connection with the user's access history so that individual SaaS sessions can be associated with the specific device used for that session. The identifying information stored can include the International Mobile Equipment Identity (IMEI), phone number, media access control (MAC) address, internet (IP) protocol address, or other uniquely or substantially uniquely identifying information. This device identification information can be tracked across multiple user sessions and/or stored in connection with the associated user profile. Subsequent queries can then be executed to determine what device was used by a given user to access a given SaaS service in a single session or across multiple sessions.
The traffic parameters can be input to a detection module (1012). The detection module can also receive input based on user profile information from a user profile data store. The user profile information can include information about the user whose traffic is being analyzed. As a non-limiting example, the user information can be sourced from the detection module. The detection module can also receive input from a knowledgebase including other information such as information about specific security threats. In a preferred embodiment, the knowledgebase can include the cloud service index (1015) as a component. In some embodiments, the detection module (1012) can be included as a component of the security gateway (1011). In alternative embodiments, the detection module (1012) can be a separate component in communication with the security gateway (1011).
The threat detection module (1012) can include a profiling engine, distance-based anomaly engine, and a statistical-based anomaly engine. The statistical anomaly engine can be configured to make threat assessments based on a combination of short- and/or long-term statistical information. Each engine can receive any or all of the traffic parameters described above. Each of the engines can also receive input derived from the other engines.
Anomaly Engine
The anomaly engine can be configured to detect a specific anomalous operation, a series of anomalous operations, and/or a pattern of anomalous operations. For example, the engine can be configured to determine whether a specific operation being performed by a user or the SaaS provider is suspicious based on it being performed more frequently than historical data acquired over a learning time predicts it would be performed (e.g., higher rate of operations, etc.) or the connection has a new source or destination location. The anomaly engine can also be configured to determine whether a sequence of operations by the user is suspicious. In some cases, an individual operation may not be suspicious. However, when that operation is performed in sequence with another operation, the set of operations may be suspicious. For example, a user may authenticate with the SaaS provider and then begin transferring files out of the system. As an example, the anomaly engine can be configured to identify this sequence as suspicious. Thus, anomaly detection of suspicious traffic may be based on a sequence of activities which may be composed of a number of operations. The anomaly engine can also be configured to determine whether a pattern of non-sequential operations is suspicious. In suspicious pattern detection, the anomaly engine can be configured to examine actions taken out of sequence and over arbitrary periods of time. The suspiciousness of individual operations, sequences of operations, and patterns of operations can be determined based on any of the parameters described herein.
Anomalies can be detected based on comparing one or more parameters to previously stored profile information. As non-limiting examples, the profile information can include: location, time of activity (hour of day, day of week, etc.), device usage, user-agent (type and version), frequency of actions/requests, type of actions performed, order of actions performed, type of information accessed, traffic bandwidth, session characteristics (length, idle time, etc.), and/or HTTP requests characteristics (which resources are accessed, methods, headers, capitalization, etc.).
Cloud Service Index
The threat detection logic can include a cloud service index (1015) comprising a set of parameters that combine SaaS application risk factors for any given SaaS provider. An example parameter set is illustrated in FIG. 12. The risk level assessment can be based on information from some or all of the sources, including but not limited to:
1. Information provided by the SaaS provider regarding its security policy sourced from, as non-limiting examples, whitepapers, certifications, and so on.
2. Independent research concerning the SaaS provider, the client, and other environmental factors; and/or
3. A history of vulnerabilities and/or attacks on clients' SaaS applications, identified by the detection module, based on analysis of the traffic intercepted by the security gateway.
The risk can be measured with respect to one or more axes, including but not limited to:
1. Data risk: Risks imposed on the data that the SaaS holds, such as multi-tenancy and using non-encrypted data;
2. User/Device risk: Risks imposed by connected users and devices including, for example, authentication quality, anonymous usage capability, etc.;
3. Service risk: Risks imposed on the service provider's network, such as the quality of the security practices the provider claims to perform, web application security level, vulnerability management, etc.; and
4. Business risk: The control the provider allows to its clients and the ability of these control measures to protect the usage of the service, including, e.g., auditing capabilities, enterprise administrative control, and operational practices.
A list of example risk factors is provided in FIG. 12. As indicated in the table, any risk can be identified based on its axis, category, attribute, description, attribute value, and/or index value (such as a score or weighting).
Identification and Profiling Engine
The threat detection logic can include a module for user and device identification and profiling (1013). The profiling module can use intercepted credentials to identify the current user. The module can perform organization and user profiling based on passive traffic recordings to identify some or all of the following characteristics:
Organization hierarchy and behavior, including single user usage patterns;
Company roles, detecting administrators, managers and/or different departments;
Company locations, detecting different branches and/or office locations and/or home locations of employees;
Distribution of user activities over the hours of the day, days of the week, months of the year, and special occasions, for the company level and/or the single user level; and
Daily user routines, including daily locations, activity times, applications and usage patterns.
The device identification and profiling module can also be configured to distinguish and identify user devices across sessions and browsers based on information derived from:
Tracking sessions with a designated session cookie that holds the device identity, the user identity, and the session information for any SaaS application the user is logged-in to;
JavaScript injection to pages in order to identify devices accessing through the proxy;
Cross-browser storage to link sessions managed from different browsers on the same device; and
Unified identities database to keep track of sessions, devices and the links between them.
Feedback
The threat characterization logic can include methods for constructing a supervised learning model for security alerts. The system can collect feedback on alerts, engage both the IT and the employee and dynamically build the user profile by querying the user for suspicious patterns, and/or engage the supervisor, if the user appears suspicious (e.g., a rogue user).
Virtual Network
In a preferred embodiment, the system described above can be in communication with a separate virtual network (1020) in which a mock organization performs activities on various SaaS applications and is monitored by the security gateway. In that embodiment, the virtual network can be an isolated network maintained for research and testing purposes. In other embodiments, the virtual network can be incorporated into the operational network monitoring and threat detection system. The mock organization's characteristics and usage patterns can be calibrated with information from real organizations, which are then recorded by the security gateway. Anomalies can be randomly inserted in the mock traffic to test the detection module. The anomalies can represent either suspicious behavior patterns or attacks. The anomalies can be collected from various sources, including actual anomalies recorded by the security gateway and anomalies that exist in the wild and are discovered by independent research.
The virtual network can be used to perform research on future security features, as well as to test the different components of the system under stress and measure the false-positive and false-negative rates.
The virtual network can include a virtual client (1021) as well as separate instantiations of the security gateway (1022), detection module (1023) and alerts engine (1024). Changes that are to be made in the alerts engine (1014) can be tested first on the virtual alerts engine (1024).
Risk/Threat Weighting
As indicated in the example provided in FIG. 12, the identified risks can be associated with an index value in a cloud service index (1015). This index value can be used to weight the risk factors relative to each other. In some embodiments, multiple risk factors can be assessed together. As a non-limiting example, the index values for threats identified over a period of time in the network traffic can be summed together to provide a numerical value threat indicator.
Responsive Action
The risk weighting can be provided to the detection module (1012) and or the alerts engine (1014). The detection module can then take action on the network traffic based, in whole or in part, on the weighted threat information, and the alerts engine can then make an alert to the client (1001) or to the SaaS provider (1030). In some embodiments, the detection module can provide an instruction to the security gateway (1011) to drop packets being sent to the client (1001) from the SaaS provider (1030) based on the output of the detection module (1012).
Discovery Module Architecture
In some embodiments, a discovery module can be configured to inspect network traffic between a network-based software as a service (SaaS) provider and a client. In these embodiments, the system is capable of being configured to operate on such traffic between the SaaS provider and a client computing device when that computing device is connected to the SaaS provider through a public network (such as the internet) without any controls or restrictions having been placed on the client device or network. In some of these embodiments, no configuration of the client device is necessary. The discovery module can include a SaaS application database, the contents of which are described in more detail below.
In some of those embodiments, the discovery module can be embodied in the managed communications network proxy. While reference may be made herein to a proxy, it is understood that the proxy can be embodied in one or more network devices. Furthermore, the managed network proxy may be decentralized and the functions of the managed network proxy distributed over multiple machines in diverse geographic regions.
In other embodiments, the discovery module is not configured to directly inspect the network traffic passing between a network-based software as a service (SaaS) provider and a client. In those embodiments, the discovery module can initiate SaaS discovery activities from any device on the network. The discovery module can include an applet server and a SaaS application database, the contents of which are described in more detail below.
Discovery of the SaaS Environment
The discovery module, whether residing on an independent device or in the network proxy, can be configured to identify access and usage patterns for any SaaS environment. As used herein, the SaaS environment can include the SaaS platform, any application executing or installed on the platform, data stored on the platform, and/or configuration parameters alone or in combination with other factors.
An example system and method of discovery of the SaaS environment is illustrated in FIG. 13. As illustrated, the client computer may be an administrator or similar type of user with sufficient privileges for performing the discovery functions. The discovery module can be embodied as executable instructions on a client device, such as an application, applet, plug-in or other form of code. In some embodiments, the client can download and execute an application (such as a Java applet) configured to run on any organizational computer and produce a snapshot report. Additionally, the system can be configured for continuous discovery using a service that runs in the background of an organizational or client computer and allows for continuous monitoring of the SaaS.
The system can include a SaaS applications database for storing data representative of a broad range and arbitrary number of SaaS applications and their characteristics. As non-limiting examples, the applications database can include, among other records, records for any SaaS application known to be used on any platform. The records can be updated on a regular basis (e.g., daily) from multiple data sources.
The SaaS application records can include various metrics defining the security level of a particular SaaS and/or SaaS application. As non-limiting examples, metrics recorded can include: whether data is encrypted at rest, SSL encryption level, the presence or absence of built-in security features, database and data center locations, etc.
The system can be configured to automatically perform a risk assessment discovery for a given SaaS platform or application based on any of the metrics described above. The cloud service risk discovery process can execute procedures for performing passive discovery and/or active discovery of the SaaS environment.
Passive Discovery
In some embodiments, passive discovery processes can be used to determine which SaaS applications and/or data stores have been accessed by a user or caused to have been accessed by a user.
The system can be configured to determine whether a local configured Domain Name System (DNS) server is public or organizational (based on an open list of public DNS servers). If organizational, the system can query the enterprise DNS server (non-iteratively) for specific SaaS domains. Based on the response, the system can determine whether a specific application, file, or data set was accessed recently from within that enterprise network. If the query is successful, the system can determine that recent access was made from the enterprise. Otherwise, if the query is unsuccessful, the system can determine that no recent access was made from the enterprise.
Active Discovery
The system can be configured to use targeted queries to test whether a certain SaaS is available within a certain organizational network and thereby determine whether a specific SaaS is blocked within the organization network. For example, the discovery module can attempt to fetch a predefined URL on the SaaS. If the fetch attempt is successful, then the SaaS can be marked as unblocked. If the fetch attempt is unsuccessful, then the SaaS can be marked as blocked.
In some embodiments, active discovery can be used to check for configuration issues. For example, an administrator may not have configured SaaS storage, yet storage is being consumed.
Alerts
The results of the passive and/or active discovery process can be sent to a discovery server or other location for electronic storage. The results can be subject to automated and/or manual analysis.
Based on the results of the discovery process, automated alerts and cloud usage reports can be generated. For example, weekly and/or monthly cloud usage reports can be automatically generated based on the usage data stored in the database. New and trending cloud services used can be shown alone or together with detailed risk analyses. In some embodiments, high-risk SaaS application usage can trigger automatic alerts by email or other means.
SaaS Traffic Captivation
Suffix proxy implementations face the problem of dynamically generated content at the client side. Modern web applications, such as the Google Apps platform, utilize a large amount of client side code (JavaScript). This can make a suffix proxy implementation much more challenging, as basic proxy functions are insufficient and further intervention in the client side code is required.
As described herein, the suffix proxy can be used to keep URLs and web accesses of a proxied web page within the hold of the proxy. This is done by adding a suffix to URLs on the page. In the context of static pages (e.g., those that do not contain client-executable JavaScript code), this can be done on the server side, by the proxy. The method involves parsing HTML and using regular expressions to replace the URLs on the page.
The managed network proxy can be configured to inspect the traffic and detect SaaS Internet addresses. In some embodiments, the managed network proxy can be configured to inspect the network traffic for Internet addresses (such as uniform resource locators, uniform resource identifiers, etc.) As non-limiting examples, the network proxy can decompile, deconstruct, or disassemble network traffic for inspection. The managed network proxy can be configured to modify network traffic between the client device and the SaaS provider so that no network addresses are provided to the user device that would direct the client device to access a SaaS resource directly, bypassing the managed network proxy. If a SaaS Internet address is detected, that address can be rewritten to an address at the network proxy by appending the domain name for the network proxy service to the original network address.
The suffix proxy can be configured for captive page processing by processing SaaS server responses so that subsequent requests are handled by the suffix proxy. The processing may be dependent on the file type and response type. As non-limiting examples, file types processed can include HTML or JavaScript and responses can include gzipped responses or chunked responses. The suffix proxy can be configured to emulate any content, including webpages, sent from the SaaS provider. The suffix proxy can be configured to inspect and/or decompile any content to identify any referred pages and/or URLs present in the content and rewrite those URLs.
In some cases, the inspection will require executing code or scripts being transferred between the client and the SaaS provider. For example, JavaScript can be emulated at the network proxy to detect the generation of network addresses that would directly access the SaaS provider. If direct access addresses are identified in the content, the content can be modified to rewrite the address to refer to the network proxy.
Proxy Using in-Time JavaScript Translation
With client side JavaScript, run-time changes to the Document Object Model (DOM) of a page are possible, and as a result, it is possible for the client browser to create or modify DOM elements with un-suffixed URLs (because the server side proxy has no chance of replacing them). Systems and methods for restricting the access of a web application's JavaScript code to the DOM are described below.
The nature of the restriction can be such that changes to web URLs in the DOM from the original JavaScript code will be monitored by a run-time component of the proxy. With caching, any impact on run-time performance of the JavaScript code can be reduced.
Monitoring code can be invoked for read and write accesses to DOM elements such that writes of a URL into the DOM are suffixed and reads of a URL from the DOM are un-suffixed. As a result, there can be separation between the URLs seen by “user” JavaScript code (e.g., the web-applications code) and the browser itself (the DOM, and the JavaScript representation of it). As a result, the original JavaScript code can be effectively maintained inside the proxy environment such that communication with the original server (around the proxy) are prevented.
Server-Side Proxy Implementation
JavaScript code that is loaded as part of a web application can be acquired from the original server in any of several forms, including inline scripts inside HTML pages and JavaScript files (usually with a Content-Type of “text/javascript”). The systems described herein can also be configured to operate on other types of code, script, or content, such as CSS.
Typically, the browser will first load the main HTML page, and then subsequently load all referenced and inline scripts. Additional JavaScript (or HTML containing scripts) can also be loaded dynamically by the web application, using, for example, the “eval” statement.
Because dynamic code loading is initially performed by the statically loaded code (or, once loaded, other dynamic code), the system can take control of execution by modifying the static JavaScript code during the page download stage on the proxy server. The modifications to the code can be performed such that future dynamically loaded code will be modified during run-time and specific changes to the DOM can be intercepted in order to enforce the aforementioned rules, which will allow the page to remain in the control of the proxy.
Modification of dynamically loaded code can be achieved by sending dynamically evaluated code to the proxy or receiving dynamically evaluated code at the proxy for processing, and then allowing the new code to be loaded at the client browser. An example method of non-cached operation is illustrated in FIG. 14. In some embodiments, caching can be employed to improve performance, as described in more detail below and illustrated in FIG. 15.
As non-limiting examples, at least the following DOM elements and properties can be wrapped:
1. Properties of HTML elements that contain URLs:
a. The elements: “IFRAME”, “STYLE”, “LINK”, “IMG”, “AUDIO”, “A”, “FORM”, “BASE” and “SCRIPT”.
b. For each one, where they apply, the properties: “src”, “href” and “action”.
c. The getAttribute and setAttribute methods of these elements can also be used to set the aforementioned properties.
2. Properties of HTML elements that can contain a DOM sub-tree (i.e., more HTML):
a. The “appendChild” method can be used add elements (and code) dynamically.
b. The “innerHTML” property can be used to add extra code.
3. Properties of the “document” object that contain URLs or Hostnames:
a. “cookie”, “domain”—both can contain the origin domain of the window.
b. The “write” method can be used to add elements and code to the page.
4. The “open” method of XMLHttpRequest objects contains a request URL.
5. The “origin” property of “MessageEvent” objects contains the origin hostname.
6. Methods and properties of the “Window” object:
a. “location”—can redirect the frame to another URL, or determine the current location of the frame.
b. The “postMessage” method—has an origin argument.
c. “eval” and “execScript”—are used to load code dynamically.
Other such elements and properties exist, and any or all of them could be wrapped.
Static Hooking of JavaScript Code
Static hooking can be used for multiple types of content, including inline scripts and files. At the proxy server, proxied JavaScript code can be processed as follows:
1. Inline scripts in HTML are extracted and processed.
2. The code is converted into an Abstract Syntax Tree (AST) according to the Mozilla Parser API specification using open source parsing libraries.
3. The AST is traversed recursively, and calls to wrappers are inserted around certain nodes of the AST to allow for hooking.
4. Code can be re-built from the patched AST and sent to the client browser.
5. Caching of resulting processed code can be performed.
The inserted wrappers can allow for DOM changes to be caught during run-time. The wrappers can be applied to cover any or all potential DOM accesses.
As non-limiting examples, the wrappers can be applied to some or all the following AST nodes:
1. MemberExpression:
a. Potential accesses to object properties of DOM objects are wrapped.
b. Subscription operations with non-literal keys are wrapped.
c. Access to specific properties (for example, obj.src) is wrapped if the property name matches a white-list of “interesting” properties.
d. Eventually, the run-time wrapper decides whether any changes are necessary. In most cases—for example, “false positives”—the wrapper will decide to do nothing.
2. Identifier:
a. Potential accesses to a white-list of global Identifiers (which are properties of the window DOM object, e.g., “location”) are wrapped.
b. Identifier AST nodes can appear in many unrelated logical positions in the tree. Instances where the Identifier represents access to a global variable are wrapped. This is determined during the traversal stage by checking the parent nodes and eliminating all other cases.
3. AssignmentExpression:
a. Assignments to previously “marked” MemberExpressions and Identifiers are handled by another wrapper that specifically handles “set” access.
b. The “=” and “+=” assignment operators are wrapped, as relevant DOM properties may be strings (URLs).
4. CallExpression:
a. CallExpressions where a previously “marked” MemberExpression or Identifier is the callee are handled by another wrapper that specifically handles function calls.
b. A special case exists with the call to “eval”, which behaves like a statement, but is represented as a function call in the AST.
Example code before and after wrapping:
Before
var new_src = location + ‘/image’;
some_img.src = new_src;
var w = window.open(‘test’);
eval(‘test( )’);
var loc = x.src;
postMessage(‘some_message’,‘origin’);
After
var new_src =′WRAPPED_name_get(‘location’, location) + ‘/image’;
_WRAPPED_set(some_img, ‘src’, ‘=’, new_src);
var w =_WRAPPED_call(window, ‘open’)(‘test’);
eval (_WRAPPED_eval_param(eval, ‘test( )’));
var loc =_WRAPPED_get(x, ‘src’);
_WRAPPED_name_call(‘postMessage’,postMessage)(‘some_message’,
‘origin’);
Run-Time Behavior of the Wrappers
A number of different wrapper functions can be defined (according to the different wrapping cases during the AST traversal phase):
1. wrapped_get, wrapped_set, wrapped_call—wrap access to MemberExpressions according to the different use cases.
2. wrapped_name_get, wrapped_name_set, wrapped_name_call—wrap access to global Identifiers according to the different use cases.
3. wrapped_eval_param—specifically handles the code passed as the parameter of an “eval” call (which can affect the local scope).
In some embodiments, the system can first detect if the wrapper was invoked on relevant objects or properties:
1. In “MemberExpression” wrappers, the property name is checked against a white-list, as well as the subscripted object.
2. With “Identifier” wrappers, a white-list is consulted as well.
3. Objects are determined to be of a certain type (“Document”, “Window”, HTML elements, and so on), and are also compared to global instances when applicable.
These comparisons and lookups can be performed efficiently without significant impact on performance in many cases.
A wrapper call can be processed using any one of various procedures, including, as non-limiting examples:
1. Process dynamically loaded code:
a. New JavaScript code is sent to a special REST API endpoint of the proxy for translation and caching, as described below.
b. This can occur in wrappers of “appendChild”, “innerHTML”, “eval”, “execScript” and “write”.
2. Suffix or un-suffix a URL or hostname.
3. Detect a false positive wrapper invocation and resume normal execution.
Wrapper handlers that are responsible for handling DOM access to URL-related properties or methods can be divided into logical groups, for example:
1. getters—handle “get” wrappers. These will un-suffix handled URLs.
a. If a method (JavaScript type “function”) is accessed, a “decorator” is returned (see below).
2. setters—these handle “set” wrappers. They will suffix assigned URLs.
3. decorators—these handle “call” wrappers. They will return matching decorator functions for the wrapped methods, which will suffix or un-suffix URLs according to what the decorated method is.
a. This decorator can be bound to the correct object using the JavaScript “bind” method. In case of “Identifier” wrappers, the correct object is the global object (in some cases, a window). In case of “MemberExpression” wrappers, this is the object being subscripted.
Performance Impact and Optimizations
In some cases, there may be a performance impact from running the processes described herein, some of which may be experienced by the user of the proxied web-application due to JavaScript translation and AST traversal over large scripts and run-time wrappers preventing the JavaScript JIT compilers from optimizing the code in the browsers.
To improve the overhead of the translation phase, a cache can be implemented:
1. On the server side, elements of translated JavaScript code (e.g., inline script, file, or dynamic translation request) are cached locally per server.
2. The entries are keyed by a cryptographic hash of the original code.
3. The cache is thus shared across users of the proxy. This way, only the first user per-server will experience the impact of the translation phase for commonly loaded scripts.
4. The dynamic script translation REST endpoint can also be configured to accept a client-side calculated hash and perform a lookup in the cache using it. This can reduce usage of upload bandwidth for the users of the proxy. In this configuration, dynamically generated scripts may almost never be actually sent to the proxy (except for the first time).
5. In addition, the responses for dynamic translation requests (per hash) are returned with “Cache-Control” and “Expires” HTTP headers such that the result will be cached by the client's browser. In this manner, a client will be less likely to need to query the proxy server for the same dynamically generated scripts more than once.
Given the above optimizations, the impact of the translation phase can be greatly reduced from normal use cases.
The run-time performance impact of the wrappers can be mitigated by some or all of:
1. Creating an optimized fast-path for irrelevant/false-positive wrapper invocations (at the code level). This is achieved by writing the basic wrapper functions with a limited subset of JavaScript that will be easily optimized by the browser's JIT compiler.
2. A manual maintenance interface that allows for profiling and detection of the code paths having the most cache hits, and enables (manually) removing certain wrappers from the translated code in the proxy's internal cache.
System Implementation
The systems and methods described herein can be implemented in software, hardware, or any combination thereof. The systems and methods described herein can be implemented using one or more computing devices, which may or may not be physically or logically separate from each other. Additionally, various aspects of the methods described herein may be combined or merged into other functions.
In some embodiments, the system elements could be combined into a single hardware device or separated into multiple hardware devices. If multiple hardware devices are used, the hardware devices could be physically located in proximity to or remotely from each other.
The methods can be implemented in a computer program product accessible from a computer-usable or computer-readable storage medium that provides program code for use by or in connection with a computer or any instruction execution system. A computer-usable or computer-readable storage medium can be any apparatus that can contain or store the program for use by or in connection with the computer or instruction execution system, apparatus, or device.
A data processing system suitable for storing and/or executing the corresponding program code can include at least one processor coupled directly or indirectly to computerized data storage devices such as memory elements. Input/output (I/O) devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. To provide for interaction with a user, the features can be implemented on a computer with a display device, such as a CRT (cathode ray tube), LCD (liquid crystal display), or another type of monitor for displaying information to the user, a keyboard, and an input device, such as a mouse or trackball by which the user can provide input to the computer.
A computer program can be a set of instructions that can be used, directly or indirectly, in a computer. The systems and methods described herein can be implemented using programming and/or markup languages such as Perl, Python, JAVA™, C++, C, C#, Visual Basic™, JavaScript™, PHP, Flash™, XML, HTML, etc., or a combination of programming and/or markup languages, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. The software can include, but is not limited to, firmware, resident software, microcode, etc. Protocols and standards such as SOAP/HTTP, JSON, SQL, etc. may be used in implementing interfaces between programming modules. The components and functionality described herein may be implemented on any desktop or server operating system executing in a virtualized or non-virtualized environment, using any programming language suitable for software development, including, but not limited to, different versions of Microsoft™ Windows™, Apple™ Mac™, (OS™, Unix™/X-Windows™, Linux™, etc.
In some embodiments, one or more servers can function as a file server and/or can include one or more of the files used to implement the disclosed methods incorporated by an application running on a user computer and/or another server. Alternatively, a file server can include some or all necessary files, allowing such an application to be invoked remotely by a user computer and/or server. The functions described with respect to various servers herein (e.g., application server, database server, web server, file server, etc.) can be performed by a single server and/or a plurality of specialized servers, depending on implementation-specific needs and parameters.
In some embodiments, the system can include one or more databases. The location of the database(s) is discretionary. As non-limiting examples, a database might reside on a storage medium local to (and/or resident in) a server (and/or a user computer). Alternatively, a database can be remote from any or all of the computing devices, so long as it can be in communication (e.g., via a network) with one or more of these. In some embodiments, a database can reside in a storage area network (SAN). The SAN can be implemented as a computerized data storage device group. Some or all of the necessary files for performing the functions attributed to the computers can be stored locally on the respective computer and/or remotely, as appropriate. In some embodiments, the database can be a relational database, such as an Oracle database, that is adapted to store, update, and retrieve data in response to SQL-formatted commands. The database can be controlled and/or maintained by a database server.
Suitable processors for the execution of a program of instructions include, but are not limited to, general and special purpose microprocessors, and the sole processor or one of multiple processors or cores, of any kind of computer. A processor may receive and store instructions and data from a computerized data storage device such as a read-only memory, a random access memory, both, or any combination of the data storage devices described herein. A processor may include any processing circuitry or control circuitry operative to control the operations and performance of an electronic device.
The processor may also include, or be operatively coupled to communicate with, one or more data storage devices for storing data. Such data storage devices can include, as non-limiting examples, magnetic disks (including internal hard disks and removable disks), magneto-optical disks, optical disks, read-only memory, random access memory, and/or flash storage. Storage devices suitable for tangibly embodying computer program instructions and data can also include all forms of non-volatile memory, including, for example: semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and/or CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).
The systems, modules, and methods described herein can be implemented using any combination of software or hardware elements. The systems, modules, and methods described herein can be implemented using one or more virtual machines operating alone or in combination with each other. Any applicable virtualization solution can be used for encapsulating a physical computing machine platform into a virtual machine that is executed under the control of virtualization software running on a hardware computing platform or host. The virtual machine can have both virtual system hardware and guest operating system software.
The systems and methods described herein can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, but are not limited to, a LAN, a WAN, or any of the networks that form the Internet.
One or more of the disclosed embodiments may be practiced with other computer system configurations, including hand-held devices, microprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, etc. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a network.
While one or more embodiments disclosed herein have been described, various alterations, additions, permutations, and equivalents thereof are included within the scope of the disclosed embodiments.
Claims (36)
Hide Dependent 
What is claimed is:
1. A method for protecting cloud-based applications executed in a cloud computing platform, comprising:
intercepting, by at least one proxy device, traffic flows from a plurality of client devices to the cloud computing platform, wherein each of the plurality of client devices is associated with a user attempting to access a cloud-based application, wherein the at least one proxy device is connected between the plurality of client devices and the cloud computing platform;
extracting at least one parameter from the intercepted traffic related to at least each client device and a respective user attempting to access the cloud-based application;
determining, based on the at least one parameter and at least a set of parameters combining cloud-based application risk factors for a provider of the cloud computing platform, a risk indicator for the user attempting to access the cloud-based application, wherein the risk factors define at least security measures implemented by the provider and the cloud-based application; and
performing a mitigation action to mitigate a potential risk to the cloud computing platform based on the determined risk indicator, wherein the mitigation action includes at least regulating the access to the cloud-based application, and wherein the risk indicator is further determined using a profiling engine characterizing, based on passive traffic recordings of the set of parameters, user characteristics of each user, wherein the user characteristics include at least one of: user usage patterns, roles, locations, distribution of user activities over time, and daily user routines.
2. The method of claim 1, further comprising:
auditing activities of users accessing the cloud-based application.
3. The method of claim 1, wherein the cloud computing platform is a software as a service (SaaS) platform.
4. The method of claim 1 wherein the at least one parameter includes at least one of: a type of the client device, a location of the client device, an identity of the user device, an action taken by the user, a response by the cloud-based application, a time of a requested action, and bandwidth consumed by the client device.
5. The method of claim 1, wherein extracting at least one parameter from the intercepted traffic further comprises:
identifying any client device used by the user to access the cloud-based application;
storing at least one device unique parameter associated with each identified client device; and
tracking, using the at least one device unique parameter, the user attempting to access the cloud-based application across multiple sessions.
6. The method of claim 5, wherein the at least one device unique parameter associated with each identified client device comprises any one of: an International Mobile Equipment Identity (IMEI), a phone number, a media access control (MAC) address, an Internet Protocol (IP) address.
7. The method of claim 1, wherein the risk indicator is further determined using at least one of: an anomaly engine and a cloud service index, wherein the cloud service index provides the set of parameters combining the cloud-based application risk factors for the provider of the cloud computing platform, wherein each of the security measures defined by the risk factors includes any one of: an authentication protocol, an encryption type, a security certification, and a security control.
8. The method of claim 7, further comprising:
detecting, by the anomaly engine, at least one specific anomalous operation performed by each user, a series of anomalous operations by each user, and a pattern of anomalous operations performed by each user.
9. The method of claim 8, wherein the detection is based in part on information provided by the profiling engine.
10. The method of claim 7, wherein the anomaly engine is any one of: a distance-based anomaly engine and a statistical-based anomaly engine.
11. The method of claim 7, wherein the set of parameters provided by the cloud service index includes at least one of: a security policy of the cloud-computing platform, a list of history of vulnerabilities of the cloud-computing platform, and attacks performed against the cloud-computing platform.
12. The method of claim 1, wherein determining the risk indicator further comprises:
measuring a risk level for each risk vector of a plurality of risk vectors; and
computing the risk indicator as a weighted function of the measured risk levels.
13. The method of claim 12, wherein each risk vector of the plurality of risk vectors includes any one of: a data risk vector related to data maintained or accessed by the cloud-based application; a user risk vector related to a type of users or devices that can access the cloud-based application, a service risk vector related to services provided by a provider of the cloud-computing platform, and a business risk vector related to a control provided to the user of the cloud-computing platform.
14. The method of claim 1, wherein regulating the access to the cloud-based application further comprises at least one of:
generating an alert indicating on an unauthorized access; blocking an access to the cloud-based application; encrypting traffic to and from the cloud computing platform; suspending a user from accessing the cloud-based application, eliminating permissions granted to a user; and restricting access to some functions of the cloud-based application.
15. The method of claim 1, further comprising:
capturing responses sent by the cloud-based application; and
processing the captured responses to enable processing of subsequent requests by the at least one proxy device.
16. The method of claim 1, wherein each of the plurality of client devices is any one of: a managed device and an unmanaged device.
17. The method of claim 1, further comprising:
preventing a user from retrieving files from the cloud computing platform by enabling integration with cloud-based storage systems.
18. A non-transitory computer readable medium having stored thereon instructions for causing one or more processors to perform a process for protecting cloud-based applications executed in a cloud computing platform, the process comprising:
intercepting, by at least one proxy device, traffic flows from a plurality of client devices to the cloud computing platform, wherein each of the plurality of client devices is associated with a user attempting to access a cloud-based application, wherein the at least one proxy device is connected between the plurality of client devices and the cloud computing platform;
extracting at least one parameter from the intercepted traffic related to at least each client device and a respective user attempting to access the cloud-based application;
determining, based on the at least one parameter and at least a set of parameters combining cloud-based application risk factors for a provider of the cloud computing platform, a risk indicator for the user attempting to access the cloud-based application, wherein the risk factors define at least security measures implemented by the provider and the cloud-based application; and
performing a mitigation action to mitigate a potential risk to the cloud computing platform based on the determined risk indicator, wherein the mitigation action includes at least regulating the access to the cloud-based application, and wherein the risk indicator is further determined using a profiling engine characterizing, based on passive traffic recordings of the set of parameters, user characteristics of each user, wherein the user characteristics include at least one of: user usage patterns, roles, locations, distribution of user activities over time, and daily user routines.
19. A system for protecting cloud-based applications executed in a cloud computing platform, comprising:
a processor; and
a memory, the memory containing instructions that, when executed by the processor, configure the system to:
intercept traffic flows from a plurality of client devices to the cloud computing platform, wherein each of the plurality of client devices is associated with a user attempting to access a cloud-based application, wherein the system is connected between the plurality of client devices and the cloud computing platform;
extract at least one parameter from the intercepted traffic related to at least each client device and a respective user attempting to access the cloud-based application;
determine, based on the at least one parameter and at least a set of parameters combining cloud-based application risk factors for a provider of the cloud computing platform, a risk indicator for the user attempting to access the cloud-based application, wherein the risk factors define at least security measures implemented by the provider and the cloud-based application; and
perform a mitigation action to mitigate a potential risk to the cloud computing platform based on the determined risk indicator, wherein the mitigation action includes at least regulating the access to the cloud-based application, and wherein the risk indicator is further determined using a profiling engine configured to characterize, based on passive traffic recordings of the set of parameters, user characteristics of each user, wherein the user characteristics include at least one of: user usage patterns, roles, locations, distribution of user activities over time, and daily user routines.
20. The system of claim 19, the system is further configured to:
audit activities of users accessing the cloud-based application.
21. The system of claim 19, wherein the cloud computing platform is a software as a service (SaaS) platform.
22. The system of claim 19, wherein the at least one parameter includes at least one of: a type of the client device, a location of the client device, an identity of the user device, an action taken by the user, a response by the cloud-based application, a time of a requested action, and bandwidth consumed by the client device.
23. The system of claim 19, the system is further configured to:
identify any client device used by the user to access the cloud-based application;
store at least one device unique parameter associated with each identified client device; and
track, using the at least one device unique parameter, the user attempting to access the cloud-based application across multiple sessions.
24. The system of claim 23, wherein the at least one device unique parameter associated with each identified client device comprises any one of: an International Mobile Equipment Identity (IMEI), a phone number, a media access control (MAC) address, an Internet Protocol (IP) address.
25. The system of claim 19, wherein the system is further configured to determine the risk indicator using at least one of: a profiling cnginc, an anomaly engine, and a cloud service index, wherein the cloud service index provides the set of parameters combining the cloud-based application risk factors for the provider of the cloud computing platform, wherein each of the security measures defined by the risk factors includes any one of: an authentication protocol, an encryption type, a security certification, and a security control.
26. The system of claim 25, the system is further configured to:
detect, by the anomaly engine, at least one specific anomalous operation performed by each user, a series of anomalous operations by each user, and a pattern of anomalous operations performed by each user.
27. The system of claim 26, wherein the detection is based in part on information provided by the profiling engine.
28. The system of claim 25, wherein the anomaly engine is any one of: a distance-based anomaly engine and a statistical-based anomaly engine.
29. The system of claim 25, wherein the set of parameters provided by the cloud service index includes at least one of: a security policy of the cloud-computing platform, a list of history of vulnerabilities of the cloud-computing platform, and attacks performed against the cloud-computing platform.
30. The system of claim 19, the system is further configured to:
measure a risk level for each risk vector of a plurality of risk vectors; and
compute the risk indicator as a weighted function of the measured risk levels.
31. The system of claim 30, wherein each risk vector of the plurality of risk vectors includes any one of: a data risk vector related to data maintained or accessed by the cloud-based application; a user risk vector related to a type of users or devices that can access the cloud-based application, a service risk vector related to services provided by a provider of the cloud-computing platform, and a business risk vector related to a control provided to the user of the cloud-computing platform.
32. The system of claim 22, wherein regulating the access to the cloud-based application further comprises at least one of:
generating an alert indicating on an unauthorized access; blocking an access to the cloud-based application; encrypting traffic to and from the cloud computing platform; suspending a user from accessing the cloud-based application, eliminating permissions granted to a user; and restricting access to some functions of the cloud-based application.
33. The system of claim 19, wherein the system is realized as a proxy device.
34. The system of claim 33, the system is further configured to:
capture responses sent by the cloud-based application; and
process the captured responses to enable processing of subsequent requests.
35. The system of claim 19, wherein each of the plurality of client devices is any one of: a managed device and an unmanaged device.
36. The system of claim 19, the system is further configured to:
prevent a user from retrieving files from the cloud computing platform by enabling integration with cloud-based storage systems.
Patent Citations (69)
Publication number	Priority date	Publication date	Assignee	Title
US6397246B1	1998-11-13	2002-05-28	International Business Machines Corporation	Method and system for processing document requests in a network system
US20060117388A1 *	2004-11-18	2006-06-01	Nelson Catherine B	System and method for modeling information security risk
US20070016949A1	2005-07-15	2007-01-18	Microsoft Corporation	Browser Protection Module
US20070180510A1 *	2006-01-31	2007-08-02	Darrell Long	Methods and systems for obtaining URL filtering information
US20080177691A1 *	2007-01-24	2008-07-24	Secure Computing Corporation	Correlation and Analysis of Entity Attributes
US20090077369A1	2004-11-12	2009-03-19	Justsystems Corporation	Data Processing Device And Data Processing Method
US20090083726A1	2007-09-20	2009-03-26	Oracle International Corporation	Non invasive contextual and rule driven injection proxy
US7571217B1 *	2000-08-16	2009-08-04	Parallel Networks, Llc	Method and system for uniform resource locator transformation
US20090217354A1	2008-02-27	2009-08-27	International Business Machines Corporation	Controlling access of a client system to access protected remote resources supporting relative urls
US20090262741A1 *	2000-06-23	2009-10-22	Jungck Peder J	Transparent Provisioning of Services Over a Network
US20100103837A1 *	2000-06-23	2010-04-29	Jungck Peder J	Transparent provisioning of network access to an application
US20100146260A1 *	2005-05-02	2010-06-10	Barracuda Networks, Inc.	Tandem encryption connections to provide network traffic security method and apparatus
US20100162346A1 *	2008-12-19	2010-06-24	Microsoft Corporation	Selecting security offerings
US20100313183A1	2009-06-05	2010-12-09	Maxymiser Ltd.	Method of Website Optimisation
US20100325357A1 *	2009-06-22	2010-12-23	Anoop Kandi Reddy	Systems and methods for integration between application firewall and caching
US7873707B1	2004-10-27	2011-01-18	Oracle America, Inc.	Client-side URL rewriter
US20110029613A1 *	2007-08-03	2011-02-03	John Norman Hedditch	Evaluation of an attribute of an information object
US20110131478A1	2000-09-26	2011-06-02	Juniper Networks, Inc.	Method and system for modifying script portions of requests for remote resources
WO2011094807A1	2010-02-03	2011-08-11	John Norman Hedditch	Presentation of an information object
US20110208838A1	2001-11-02	2011-08-25	Juniper Networks, Inc.	Method and system for providing secure access to private networks with client redirection
US20110289588A1 *	2010-05-20	2011-11-24	Anupam Sahai	Unification of security monitoring and IT-GRC
US20110289434A1 *	2010-05-20	2011-11-24	Barracuda Networks, Inc.	Certified URL checking, caching, and categorization service
US20120023160A1 *	2003-10-02	2012-01-26	Netmask (El-Mar) Internet Technologies Ltd.	Dynamic content conversion
US20120030294A1	2010-07-28	2012-02-02	Openwave Systems Inc.	Method and system for link-triggered link-translating proxying
US20120116896A1	2010-04-01	2012-05-10	Lee Hahn Holloway	Internet-based proxy service to modify internet responses
US20120137210A1	2010-11-29	2012-05-31	Hughes Network Systems, Llc	Computer networking system and method with javascript injection for web page response time determination
US20130073609A1	2011-09-16	2013-03-21	Strangeloop Networks Inc.	Mobile resource accelerator
US20130097711A1 *	2011-10-17	2013-04-18	Mcafee, Inc.	Mobile risk assessment
US20130097706A1 *	2011-09-16	2013-04-18	Veracode, Inc.	Automated behavioral and static analysis using an instrumented sandbox and machine learning classification for mobile security
WO2013091709A1	2011-12-22	2013-06-27	Fundació Privada Barcelona Digital Centre Tecnologic	Method and apparatus for real-time dynamic transformation of the code of a web document
US20130212689A1	2012-02-14	2013-08-15	International Business Machines Corporation	Managing network data
US8543726B1	2005-04-08	2013-09-24	Citrix Systems, Inc.	Web relay
US20130276136A1	2010-12-30	2013-10-17	Ensighten, Inc.	Online Privacy Management
US20130311863A1 *	2012-05-17	2013-11-21	Oracle International Corporation	System for re-writing dynamically generated uniform resource locators in proxied hyper text markup language content
US20130347094A1 *	2012-06-25	2013-12-26	Appthority, Inc.	In-line filtering of insecure or unwanted mobile device software components or communications
US20140020072A1 *	2012-07-13	2014-01-16	Andrew J. Thomas	Security access protection for user data stored in a cloud computing facility
US20140032759A1 *	2011-10-11	2014-01-30	Citrix Systems, Inc.	Policy-Based Application Management
US20140109175A1 *	2012-10-15	2014-04-17	Citrix Systems, Inc.	Providing Virtualized Private Network Tunnels
US20140137273A1 *	2012-11-13	2014-05-15	Appsense Limited	System and method for securing the upload of files from a system server
US20140201524A1 *	2013-01-15	2014-07-17	Sap Ag	Systems and Methods for Securing Data in a Cloud Computing Environment Using In-Memory Techniques and Secret Key Encryption
US20140237545A1 *	2013-02-19	2014-08-21	Marble Security	Hierarchical risk assessment and remediation of threats in mobile networking environment
US20140283000A1 *	2013-03-14	2014-09-18	Cisco Technology, Inc.	Proxy that Switches from Light-Weight Monitor Mode to Full Proxy
US20140282464A1	2013-03-18	2014-09-18	Cloudmask	Systems and methods for intercepting, processing, and protecting user data through web application pattern detection
US20140282518A1 *	2013-03-15	2014-09-18	Symantec Corporation	Enforcing policy-based compliance of virtual machine image configurations
US8856869B1 *	2009-06-22	2014-10-07	NexWavSec Software Inc.	Enforcement of same origin policy for sensitive data
US20140344332A1	2013-05-20	2014-11-20	Citrix Systems, Inc.	Multimedia Redirection in a Virtualized Environment Using a Proxy Server
US8938800B2 *	2010-07-28	2015-01-20	Mcafee, Inc.	System and method for network level protection against malicious software
US20150066575A1 *	2013-08-28	2015-03-05	Bank Of America Corporation	Enterprise risk assessment
US20150088968A1	2013-09-20	2015-03-26	Yottaa Inc.	Systems and methods for managing loading priority or sequencing of fragmants of a web object
US9137131B1	2013-03-12	2015-09-15	Skyhigh Networks, Inc.	Network traffic monitoring system and method to redirect network traffic through a network intermediary
US9154479B1 *	2012-09-14	2015-10-06	Amazon Technologies, Inc.	Secure proxy
US20160119344A1	2013-07-04	2016-04-28	Jscrambler S.A.	System and method for web application security
US9391832B1	2011-12-05	2016-07-12	Menlo Security, Inc.	Secure surrogate cloud browsing
US9438625B1	2014-09-09	2016-09-06	Shape Security, Inc.	Mitigating scripted attacks using dynamic polymorphism
US20160330172A1 *	2013-11-25	2016-11-10	Mcafee, Inc.	Secure proxy to protect private data
US20170116349A1	2014-04-23	2017-04-27	Akamai Technologies Inc.	Creation and delivery of pre-rendered web pages for accelerated browsing
US20170163675A1	2014-06-16	2017-06-08	Amazon Technologies, Inc.	Distributed split browser content inspection and analysis
Family To Family Citations				
CN101075240A *	2006-08-25	2007-11-21	腾讯科技（深圳）有限公司	Method and system for spanned acquiring data
JP2010515112A *	2006-10-21	2010-05-06	ネットピア．コム インコーポレイテッド	Keyword processing method and recording medium recording program for executing the same
US7958232B1 *	2007-12-05	2011-06-07	Appcelerator, Inc.	Dashboard for on-the-fly AJAX monitoring
US7664862B2 *	2008-01-14	2010-02-16	International Business Machines Corporation	Browser-based proxy server for customization and distribution of existing applications
JP5151696B2 *	2008-05-30	2013-02-27	富士通株式会社	Program to rewrite uniform resource locator information
US9119017B2 *	2011-03-18	2015-08-25	Zscaler, Inc.	Cloud based mobile device security and policy enforcement
CA2791566C *	2010-03-01	2018-09-18	Andreas Wittenstein	System and method for network security including detection of attacks through partner websites
CN102255935B *	2010-05-20	2016-06-15	中兴通讯股份有限公司	Cloud service consuming method, cloud service intermediary and cloud system
JP5581820B2 *	2010-06-04	2014-09-03	富士通株式会社	Relay server device, cookie control method, and cookie control program
WO2012063282A1 *	2010-11-10	2012-05-18	株式会社日立製作所	Operating method and system for mashup application
US9647989B2 *	2011-04-27	2017-05-09	Symantec Corporation	System and method of data interception and conversion in a proxy
JP2013196396A *	2012-03-19	2013-09-30	Fujitsu Ltd	Relay server, relay program and relay method
* Cited by examiner, † Cited by third party
Non-Patent Citations (17)
Title
"Final Office Action Issued in U.S. Appl. No. 14/539,980", dated Dec. 8, 2015, 13 Pages.
"International Search Report and Written Opinion Issued in PCT Application No. PCT/US2015/049606", dated Feb. 25, 2016, 7 Pages.
"Non Final Office Action Issued in U.S. Appl. No. 14/847,469", dated Dec. 15, 2017, 19 Pages.
"Non Final Office Action Issued in U.S. Appl. No. 14/847,469", dated Jul. 6, 2018, 15 Pages.
"Non-Final Office Action Issued in U.S. Appl. No. 14/539,980", dated Jan. 26, 2015, 9 Pages.
"Notice of Allowance Issued in U.S. Appl. No. 14/539,980", dated May 16, 2016, 4 Pages.
"Notice of Allowance Issued in U.S. Appl. No. 14/539,980", dated May 4, 2016, 12 Pages.
"Office Action Issued in Australia Patent Application No. 2014346390", dated Mar. 15, 2018, 3 Pages.
"Office Action Issued in Chile Patent Application No. 1116-2016", dated Jan. 26, 2018, 9 Pages.
"Office Action Issued in Chile Patent Application No. 1116-2016", dated Jul. 3, 2018, 12 Pages.
"Office Action Issued in Chinese Patent Application No. 201480061802.1", dated Aug. 3, 2018, 11 Pages.
"Office Action Issued in Colombian Patent Application No. 16-139041", dated Nov. 24, 2017, 17 Pages.
"Office Action Issued in Mexican Patent Application No. MX/a/2016/006109", dated Nov. 29, 2017, 2 pages. (W/o English Translation).
"Office Action Issued in Russian Patent Application No. 2016117971", dated Jul. 9, 2018, 5 Pages.
"Supplementary Search Report Issued in European Patent Application No. 14860194.1" dated May 31, 2017, 7 Pages.
Magazinius, et al., "Architectures for Inlining Security Monitors in Web Applications", In Proceedings of 6th International Symposium on Engineering Secure Software and Systems, Feb. 26, 2014, 18 Pages.
Patent Cooperation Treaty International Search Report and Written Opinion for PCT/US2014/065305, ISA/US, Alexandria, VA., dated Mar. 3, 2015.
* Cited by examiner, † Cited by third party
Cited By (77)
Publication number	Priority date	Publication date	Assignee	Title
US10372907B2 *	2016-06-02	2019-08-06	AO Kaspersky Lab	System and method of detecting malicious computer systems
US20210160219A1 *	2018-11-20	2021-05-27	Netskope, Inc.	Policy-controlled authentication for internet communication
Family To Family Citations				
US8560604B2	2009-10-08	2013-10-15	Hola Networks Ltd.	System and method for providing faster and more efficient data communication
US9241044B2	2013-08-28	2016-01-19	Hola Networks, Ltd.	System and method for improving internet communication by using intermediate nodes
US9692789B2 *	2013-12-13	2017-06-27	Oracle International Corporation	Techniques for cloud security monitoring and threat intelligence
US9928377B2 *	2015-03-19	2018-03-27	Netskope, Inc.	Systems and methods of monitoring and controlling enterprise information stored on a cloud computing service (CCS)
US11057446B2	2015-05-14	2021-07-06	Bright Data Ltd.	System and method for streaming content from multiple servers
CN106302335B *	2015-05-22	2020-02-07	杭州海康威视数字技术股份有限公司	Network monitoring equipment, method, device and system for resetting password thereof and server
CN106487774B	2015-09-01	2019-06-25	阿里巴巴集团控股有限公司	A kind of cloud host services authority control method, device and system
CN105242533B *	2015-09-01	2017-11-28	西北工业大学	A kind of change admittance remote operating control method for merging multi information
US9740245B2	2015-10-05	2017-08-22	Microsoft Technology Licensing, Llc	Locking mechanism
US20170118239A1 *	2015-10-26	2017-04-27	Microsoft Technology Licensing, Llc.	Detection of cyber threats against cloud-based applications
US10484430B2	2015-11-05	2019-11-19	Microsoft Technology Licensing, Llc	Just-in-time access based on screening criteria to maintain control of restricted data in cloud computing environments
US10476886B2	2015-11-05	2019-11-12	Microsoft Technology Licensing, Llc	Just-in-time access based on geolocation to maintain control of restricted data in cloud computing environments
US10560463B2	2015-11-05	2020-02-11	Microsoft Technology Licensing, Llc	Incident management to maintain control of restricted data in cloud computing environments
WO2017083140A1 *	2015-11-10	2017-05-18	Avanan Inc.	Cloud services discovery and monitoring
US10517056B2	2015-12-03	2019-12-24	Mobile Tech, Inc.	Electronically connected environment
US10728868B2	2015-12-03	2020-07-28	Mobile Tech, Inc.	Remote monitoring and control over wireless nodes in a wirelessly connected environment
US10251144B2	2015-12-03	2019-04-02	Mobile Tech, Inc.	Location tracking of products and product display assemblies in a wirelessly connected environment
US10200330B2	2015-12-10	2019-02-05	Facebook, Inc.	Techniques for ephemeral messaging with a message queue
US9906480B2 *	2015-12-10	2018-02-27	Facebook, Inc.	Techniques for ephemeral messaging with legacy clients
US10320844B2	2016-01-13	2019-06-11	Microsoft Technology Licensing, Llc	Restricting access to public cloud SaaS applications to a single organization
US20170206148A1 *	2016-01-20	2017-07-20	Facebook, Inc.	Cross-region failover of application services
US10382424B2	2016-01-26	2019-08-13	Redhat, Inc.	Secret store for OAuth offline tokens
US10826973B2	2016-02-04	2020-11-03	Carrier Corporation	Security system including business continuity provider
US10536478B2	2016-02-26	2020-01-14	Oracle International Corporation	Techniques for discovering and managing security of applications
US11363022B2	2016-03-28	2022-06-14	Zscaler, Inc.	Use of DHCP for location information of a user device for automatic traffic forwarding
US9935955B2 *	2016-03-28	2018-04-03	Zscaler, Inc.	Systems and methods for cloud based unified service discovery and secure availability
US11297058B2 *	2016-03-28	2022-04-05	Zscaler, Inc.	Systems and methods using a cloud proxy for mobile device management and policy
US10291636B2	2016-05-23	2019-05-14	International Business Machines Corporation	Modifying a user session lifecycle in a cloud broker environment
US10469525B2	2016-08-10	2019-11-05	Netskope, Inc.	Systems and methods of detecting and responding to malware on a file system
US10305861B2	2016-08-29	2019-05-28	Microsoft Technology Licensing, Llc.	Cross-tenant data leakage isolation
US10243946B2	2016-11-04	2019-03-26	Netskope, Inc.	Non-intrusive security enforcement for federated single sign-on (SSO)
CN106506648B *	2016-11-10	2019-05-17	东软集团股份有限公司	Load balancing service management method and system
US20180139297A1 *	2016-11-16	2018-05-17	Oath (Americas) Inc.	SYSTEMS AND METHODS FOR TRACKING DEVICE IDs FOR VIRTUALIZED APPLICATIONS
US10333936B2 *	2017-01-24	2019-06-25	Box, Inc.	Method and system for secure cross-domain login
US10511599B2	2017-03-13	2019-12-17	Microsoft Technology Licensing, Llc	System to filter impossible user travel indicators
US10178096B2	2017-03-31	2019-01-08	International Business Machines Corporation	Enhanced data leakage detection in cloud services
US10558641B2	2017-04-21	2020-02-11	Microsoft Technology Licensing, Llc	Trigger system for databases using proxy
KR101980568B1 *	2017-04-24	2019-05-22	(주)유엠로직스	Preventing Security Control Duplication Method In Association With 3-tier Cloud Access Security Broker
US10977359B2	2017-05-15	2021-04-13	Microsoft Technology Licensing, Llc	Automatic takeover of applications installed on client devices in an enterprise network
US10794093B2	2017-05-19	2020-10-06	Microsoft Technology Licensing, Llc	Method of optimizing memory wire actuator energy output
US11005864B2 *	2017-05-19	2021-05-11	Salesforce.Com, Inc.	Feature-agnostic behavior profile based anomaly detection
US10505918B2 *	2017-06-28	2019-12-10	Cisco Technology, Inc.	Cloud application fingerprint
JP6717548B2 *	2017-07-21	2020-07-01	日本電信電話株式会社	Traffic control system and method
US10834113B2	2017-07-25	2020-11-10	Netskope, Inc.	Compact logging of network traffic events
CN107295008A *	2017-08-01	2017-10-24	广东云下汇金科技有限公司	A kind of connection method for building up under enterprise's mixing cloud computing environment
EP3998538A1	2017-08-28	2022-05-18	Bright Data Ltd.	Mobile tunnel device for improving web content fetching while on idle state
US11190374B2	2017-08-28	2021-11-30	Bright Data Ltd.	System and method for improving content fetching by selecting tunnel devices
EP3480753A1 *	2017-11-02	2019-05-08	Lstech Ltd	A computer implemented method, a system and a computer program for optimizing the operation of a cloud hosted software as a service (saas) system
US10630676B2 *	2017-11-24	2020-04-21	Microsoft Technology Licensing, Llc	Protecting against malicious discovery of account existence
CN107995273B *	2017-11-27	2021-02-09	北京酷我科技有限公司	iOS network management method
US11055417B2	2018-04-17	2021-07-06	Oracle International Corporation	High granularity application and data security in cloud environments
CN108718236B *	2018-05-21	2020-08-18	西安交通大学	Data transmission method for internet self-organizing convergence
US10951588B2	2018-07-26	2021-03-16	Palo Alto Networks, Inc.	Object property getter and setter for clientless VPN
US11093574B2	2018-07-26	2021-08-17	Palo Alto Networks, Inc.	Encoding-free javascript stringify for clientless VPN
US10831836B2	2018-07-26	2020-11-10	Palo Alto Networks, Inc.	Browser storage for clientless VPN
US11403418B2	2018-08-30	2022-08-02	Netskope, Inc.	Enriching document metadata using contextual information
JP6979494B2 *	2018-09-20	2021-12-15	エヌ・ティ・ティ・コミュニケーションズ株式会社	Controls, control methods, and programs
US10944769B2	2018-09-25	2021-03-09	Oracle International Corporation	Intrusion detection on load balanced network traffic
WO2020086575A1 *	2018-10-25	2020-04-30	Mobile Tech, Inc.	Proxy nodes for expanding the functionality of nodes in a wirelessly connected environment
US11416641B2	2019-01-24	2022-08-16	Netskope, Inc.	Incident-driven introspection for data loss prevention
US11323454B1 *	2019-01-30	2022-05-03	NortonLifeLock Inc.	Systems and methods for securing communications
EP3780557A1	2019-02-25	2021-02-17	Luminati Networks Ltd.	System and method for url fetching retry mechanism
EP4030318A1	2019-04-02	2022-07-20	Bright Data Ltd.	System and method for managing non-direct url fetching service
US11263201B2 *	2019-04-12	2022-03-01	Servicenow, Inc.	Interface for supporting integration with cloud-based service providers
US10873644B1 *	2019-06-21	2020-12-22	Microsoft Technology Licensing, Llc	Web application wrapper
US20210133257A1 *	2019-10-31	2021-05-06	Citrix Systems, Inc.	Systems and methods for generating data structures from browser data to determine and initiate actions based thereon
US20210160220A1 *	2019-11-25	2021-05-27	Microsoft Technology Licensing, Llc	Security service
CN111212077B *	2020-01-08	2022-07-05	中国建设银行股份有限公司	Host access system and method
WO2021174357A1 *	2020-03-03	2021-09-10	Kivera Corporation	System and method for securing cloud based services
US11356502B1 *	2020-04-10	2022-06-07	Wells Fargo Bank, N.A.	Session tracking
US11356495B2 *	2020-10-29	2022-06-07	Microsoft Technology Licensing, Llc	Restore URL context for proxies
US11336698B1	2021-04-22	2022-05-17	Netskope, Inc.	Synthetic request injection for cloud policy enforcement
US11271972B1	2021-04-23	2022-03-08	Netskope, Inc.	Data flow logic for synthetic request injection for cloud security enforcement
CN113704668A *	2021-09-01	2021-11-26	稿定（厦门）科技有限公司	Data processing method and device for webpage development
CN113704669A *	2021-09-01	2021-11-26	稿定（厦门）科技有限公司	Data processing method and device for webpage operation
* Cited by examiner, † Cited by third party, ‡ Family to family citation
Similar Documents
Publication	Publication Date	Title
US10091169B2	2018-10-02	Method and system for protecting cloud-based applications executed in a cloud computing platform
US10642600B2	2020-05-05	Cloud suffix proxy and a method thereof
US8782796B2	2014-07-15	Data exfiltration attack simulation technology
US11190487B2	2021-11-30	Identifying security risks and enforcing policies on encrypted/encoded network communications
US9606854B2	2017-03-28	Insider attack resistant system and method for cloud services integrity checking
Marshall et al.	2010	Security best practices for developing windows azure applications
US10587577B2	2020-03-10	Dynamic, event-driven traffic control in a managed network
Shamim et al.	2020	Xi commandments of kubernetes security: A systematization of knowledge related to kubernetes security practices
US8656154B1	2014-02-18	Cloud based service logout using cryptographic challenge response
US10931661B2	2021-02-23	Methods and systems for certificate filtering
Alrawi et al.	2019	The Betrayal At Cloud City: An Empirical Analysis Of {Cloud-Based} Mobile Backends
US20200220853A1	2020-07-09	Session management for mobile devices
US20220046035A1	2022-02-10	Man-in-the-middle (MITM) checkpoint in a cloud database service environment
Berger et al.	2016	Security intelligence for cloud management infrastructures
US20220027456A1	2022-01-27	Rasp-based implementation using a security manager
Mundada et al.	2013	Silverline: Preventing data leaks from compromised web applications
Navamani et al.	2018	Discover and secure (DaS): an automated virtual machine security management framework
Guster et al.	2016	TRACING AND MANAGING A ROGUE CLOUD BASED SERVICE THROUGH A MOBILE APP.
Olurin	2016	Intrusions Detection in a Cloud Environment
Ridgway	2014	Security best practices for windows azure solutions
Navamani	2018	Towards Improving Virtual Machine Security in the Cloud
Tarrasó Hueso	2016	Improving Security of Ericsson Cloud System
Priority And Related Applications
Parent Applications (1)
Application	Priority date	Filing date	Relation	Title
US14/539,980	2013-11-11	2014-11-12	Continuation	Cloud service security broker and proxy
Priority Applications (6)
Application	Priority date	Filing date	Title
US201361902789P	2013-11-11	2013-11-11	US Provisional Application
US201361902787P	2013-11-11	2013-11-11	US Provisional Application
US201361902786P	2013-11-11	2013-11-11	US Provisional Application
US201462049473P	2014-09-12	2014-09-12	US Provisional Application
US14/539,980	2013-11-11	2014-11-12	Cloud service security broker and proxy
US14/968,432	2013-11-11	2015-12-14	Method and system for protecting cloud-based applications executed in a cloud computing platform
Applications Claiming Priority (1)
Application	Filing date	Title
US14/968,432	2015-12-14	Method and system for protecting cloud-based applications executed in a cloud computing platform
Legal Events
Date	Code	Title	Description
2018-01-08	AS	Assignment	
Owner name: MICROSOFT ISRAEL RESEARCH AND DEVELOPMENT (2002) LTD, ISRAEL

Free format text: MERGER;ASSIGNOR:ADALLOM TECHNOLOGIES LTD.;REEL/FRAME:045014/0064

Effective date: 20170528

Owner name: MICROSOFT ISRAEL RESEARCH AND DEVELOPMENT (2002) L

Free format text: MERGER;ASSIGNOR:ADALLOM TECHNOLOGIES LTD.;REEL/FRAME:045014/0064

Effective date: 20170528

2018-09-12	STCF	Information on status: patent grant	
Free format text: PATENTED CASE

2021-10-20	AS	Assignment	
Owner name: MICROSOFT CORPORATION, WASHINGTON

Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MICROSOFT ISRAEL RESEARCH AND DEVELOPMENT (2002) LTD;REEL/FRAME:057850/0952

Effective date: 20210930

2021-10-25	AS	Assignment	
Owner name: MICROSOFT TECHNOLOGY LICENSING, LLC, WASHINGTON

Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MICROSOFT CORPORATION;REEL/FRAME:057900/0601

Effective date: 20211012

2022-03-16	MAFP	Maintenance fee payment	
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY

Year of fee payment: 4

Concepts
machine-extracted
 Download
Filter table 
Name	Image	Sections	Count	Query match
 detection method		claims,description	27	0.000
 method		claims,description	24	0.000
 response		claims,description	20	0.000
 effects		claims,description	16	0.000
 anomalous		claims,description	9	0.000
 routine		claims,description	4	0.000
 mitigating		claims	6	0.000
 regulatory		claims	5	0.000
 blocking		claims	2	0.000
Show all concepts from the description section
Data provided by IFI CLAIMS Patent Services
About Send Feedback Public Datasets Terms Privacy Policy